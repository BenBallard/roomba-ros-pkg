/* auto-generated by genmsg_cpp from /opt/igvc_ros/harlie_wsn_steering/msg/DesiredState.msg.  Do not edit! */
package ros.pkg.harlie_wsn_steering.msg;


import java.nio.ByteBuffer;

public  class DesiredState extends ros.communication.Message
{

  public float x;
  public float y;
  public float theta;
  public float rho;

  public DesiredState() {
 super();

  }
  public static java.lang.String __s_getDataType() { return "harlie_wsn_steering/DesiredState"; }
  public static java.lang.String __s_getMD5Sum() { return "e78e1c6935530c1507030b878e0bbe08"; }
  public static java.lang.String __s_getMessageDefinition()
  {
    return 
    "float32 x\n" + 
    "float32 y\n" + 
    "float32 theta\n" + 
    "float32 rho\n" + 
    "\n" + 
    "\n" + 
    "";
  }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public java.lang.String getMD5Sum()   { return __s_getMD5Sum(); }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }
  public DesiredState clone() {
    DesiredState clone = (DesiredState)super.clone();
    return clone;
  }

  public static java.util.Map<java.lang.String, java.lang.String> fieldTypes() {
         java.util.HashMap<java.lang.String, java.lang.String> m = new java.util.HashMap<java.lang.String, java.lang.String>  ();      m.put("x", "float");
     m.put("y", "float");
     m.put("theta", "float");
     m.put("rho", "float");
     return m;
  }

  public static java.util.Set<java.lang.String> submessageTypes() {
         java.util.HashSet<java.lang.String> s = new java.util.HashSet<java.lang.String>  ();      return s;
  }

  public void setTo(ros.communication.Message __m) {
    if (!(__m instanceof DesiredState)) throw new RuntimeException("Invalid Type");
    DesiredState __m2 = (DesiredState) __m;
    x = __m2.x;
    y = __m2.y;
    theta = __m2.theta;
    rho = __m2.rho;
    }

  public int serializationLength() 
  {
    int __l = 0;
    __l += 4; // x
    __l += 4; // y
    __l += 4; // theta
    __l += 4; // rho
    return __l;
  }
  public void serialize(ByteBuffer bb, int seq) {
    bb.putFloat(x);
    bb.putFloat(y);
    bb.putFloat(theta);
    bb.putFloat(rho);
  }
  public void deserialize(ByteBuffer bb)  {
    x = bb.getFloat();
    y = bb.getFloat();
    theta = bb.getFloat();
    rho = bb.getFloat();
  }
}

