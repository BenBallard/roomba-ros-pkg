/* Auto-generated by genmsg_cpp for file /opt/igvc_ros/harlie_base/msg/Pose.msg */
#ifndef HARLIE_BASE_MESSAGE_POSE_H
#define HARLIE_BASE_MESSAGE_POSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"

namespace harlie_base
{
template <class ContainerAllocator>
struct Pose_ : public ros::Message
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
  : header()
  , x(0.0)
  , y(0.0)
  , theta(0.0)
  , vel(0.0)
  , omega(0.0)
  , x_var(0.0)
  , y_var(0.0)
  , theta_var(0.0)
  , vel_var(0.0)
  , omega_var(0.0)
  {
  }

  Pose_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , x(0.0)
  , y(0.0)
  , theta(0.0)
  , vel(0.0)
  , omega(0.0)
  , x_var(0.0)
  , y_var(0.0)
  , theta_var(0.0)
  , vel_var(0.0)
  , omega_var(0.0)
  {
  }

  typedef  ::roslib::Header_<ContainerAllocator>  _header_type;
   ::roslib::Header_<ContainerAllocator>  header;

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _theta_type;
  float theta;

  typedef float _vel_type;
  float vel;

  typedef float _omega_type;
  float omega;

  typedef float _x_var_type;
  float x_var;

  typedef float _y_var_type;
  float y_var;

  typedef float _theta_var_type;
  float theta_var;

  typedef float _vel_var_type;
  float vel_var;

  typedef float _omega_var_type;
  float omega_var;


private:
  static const char* __s_getDataType_() { return "harlie_base/Pose"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "7ce3d88c4d07be05d54abf722834318f"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
float32 x\n\
float32 y\n\
float32 theta\n\
float32 vel\n\
float32 omega\n\
float32 x_var\n\
float32 y_var\n\
float32 theta_var\n\
float32 vel_var\n\
float32 omega_var\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, theta);
    ros::serialization::serialize(stream, vel);
    ros::serialization::serialize(stream, omega);
    ros::serialization::serialize(stream, x_var);
    ros::serialization::serialize(stream, y_var);
    ros::serialization::serialize(stream, theta_var);
    ros::serialization::serialize(stream, vel_var);
    ros::serialization::serialize(stream, omega_var);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, theta);
    ros::serialization::deserialize(stream, vel);
    ros::serialization::deserialize(stream, omega);
    ros::serialization::deserialize(stream, x_var);
    ros::serialization::deserialize(stream, y_var);
    ros::serialization::deserialize(stream, theta_var);
    ros::serialization::deserialize(stream, vel_var);
    ros::serialization::deserialize(stream, omega_var);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(theta);
    size += ros::serialization::serializationLength(vel);
    size += ros::serialization::serializationLength(omega);
    size += ros::serialization::serializationLength(x_var);
    size += ros::serialization::serializationLength(y_var);
    size += ros::serialization::serializationLength(theta_var);
    size += ros::serialization::serializationLength(vel_var);
    size += ros::serialization::serializationLength(omega_var);
    return size;
  }

  typedef boost::shared_ptr< ::harlie_base::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::harlie_base::Pose_<ContainerAllocator>  const> ConstPtr;
}; // struct Pose
typedef  ::harlie_base::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::harlie_base::Pose> PosePtr;
typedef boost::shared_ptr< ::harlie_base::Pose const> PoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::harlie_base::Pose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::harlie_base::Pose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace harlie_base

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::harlie_base::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7ce3d88c4d07be05d54abf722834318f";
  }

  static const char* value(const  ::harlie_base::Pose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7ce3d88c4d07be05ULL;
  static const uint64_t static_value2 = 0xd54abf722834318fULL;
};

template<class ContainerAllocator>
struct DataType< ::harlie_base::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "harlie_base/Pose";
  }

  static const char* value(const  ::harlie_base::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::harlie_base::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 x\n\
float32 y\n\
float32 theta\n\
float32 vel\n\
float32 omega\n\
float32 x_var\n\
float32 y_var\n\
float32 theta_var\n\
float32 vel_var\n\
float32 omega_var\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::harlie_base::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::harlie_base::Pose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::harlie_base::Pose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.theta);
    stream.next(m.vel);
    stream.next(m.omega);
    stream.next(m.x_var);
    stream.next(m.y_var);
    stream.next(m.theta_var);
    stream.next(m.vel_var);
    stream.next(m.omega_var);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::harlie_base::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::harlie_base::Pose_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::roslib::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    s << indent << "omega: ";
    Printer<float>::stream(s, indent + "  ", v.omega);
    s << indent << "x_var: ";
    Printer<float>::stream(s, indent + "  ", v.x_var);
    s << indent << "y_var: ";
    Printer<float>::stream(s, indent + "  ", v.y_var);
    s << indent << "theta_var: ";
    Printer<float>::stream(s, indent + "  ", v.theta_var);
    s << indent << "vel_var: ";
    Printer<float>::stream(s, indent + "  ", v.vel_var);
    s << indent << "omega_var: ";
    Printer<float>::stream(s, indent + "  ", v.omega_var);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HARLIE_BASE_MESSAGE_POSE_H

