/* auto-generated by genmsg_cpp from /opt/igvc_ros/harlie_base/msg/Pose.msg.  Do not edit! */
#ifndef HARLIE_BASE_POSE_H
#define HARLIE_BASE_POSE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"

namespace harlie_base
{

//! \htmlinclude Pose.msg.html

class Pose : public ros::Message
{
public:
  typedef boost::shared_ptr<Pose> Ptr;
  typedef boost::shared_ptr<Pose const> ConstPtr;

  typedef roslib::Header _header_type;
  typedef float _x_type;
  typedef float _y_type;
  typedef float _theta_type;
  typedef float _x_var_type;
  typedef float _y_var_type;
  typedef float _theta_var_type;
  typedef float _x_vel_type;
  typedef float _y_vel_type;
  typedef float _theta_vel_type;

  roslib::Header header;
  float x;
  float y;
  float theta;
  float x_var;
  float y_var;
  float theta_var;
  float x_vel;
  float y_vel;
  float theta_vel;

  Pose() : ros::Message(),
    x(0),
    y(0),
    theta(0),
    x_var(0),
    y_var(0),
    theta_var(0),
    x_vel(0),
    y_vel(0),
    theta_vel(0)
  {
  }
  Pose(const Pose &copy) : ros::Message(),
    header(copy.header),
    x(copy.x),
    y(copy.y),
    theta(copy.theta),
    x_var(copy.x_var),
    y_var(copy.y_var),
    theta_var(copy.theta_var),
    x_vel(copy.x_vel),
    y_vel(copy.y_vel),
    theta_vel(copy.theta_vel)
  {
    (void)copy;
  }
  Pose &operator =(const Pose &copy)
  {
    if (this == &copy)
      return *this;
    header = copy.header;
    x = copy.x;
    y = copy.y;
    theta = copy.theta;
    x_var = copy.x_var;
    y_var = copy.y_var;
    theta_var = copy.theta_var;
    x_vel = copy.x_vel;
    y_vel = copy.y_vel;
    theta_vel = copy.theta_vel;
    return *this;
  }
  virtual ~Pose() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("harlie_base/Pose"); }
  inline static std::string __s_getMD5Sum() { return std::string("6912a6eb81006b68b259c9bf26039f96"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "Header header\n"
    "float32 x\n"
    "float32 y\n"
    "float32 theta\n"
    "float32 x_var\n"
    "float32 y_var\n"
    "float32 theta_var\n"
    "float32 x_vel\n"
    "float32 y_vel\n"
    "float32 theta_vel\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += header.serializationLength(); // header
    __l += 4; // x
    __l += 4; // y
    __l += 4; // theta
    __l += 4; // x_var
    __l += 4; // y_var
    __l += 4; // theta_var
    __l += 4; // x_vel
    __l += 4; // y_vel
    __l += 4; // theta_vel
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
                             uint32_t seq) const
  {
    roslib::Header _ser_header = header;
    bool __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    write_ptr = _ser_header.serialize(write_ptr, seq);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, x);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, y);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, theta);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, x_var);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, y_var);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, theta_var);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, x_vel);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, y_vel);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, theta_vel);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = header.deserialize(read_ptr);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, x);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, y);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, theta);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, x_var);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, y_var);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, theta_var);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, x_vel);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, y_vel);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, theta_vel);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Pose> PosePtr;
typedef boost::shared_ptr<Pose const> PoseConstPtr;


}

#endif
