# autogenerated by genmsg_py from Pose.msg. Do not edit.
import roslib.message
import struct

import roslib.msg

class Pose(roslib.message.Message):
  _md5sum = "6912a6eb81006b68b259c9bf26039f96"
  _type = "harlie_base/Pose"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float32 x
float32 y
float32 theta
float32 x_var
float32 y_var
float32 theta_var
float32 x_vel
float32 y_vel
float32 theta_vel

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','x','y','theta','x_var','y_var','theta_var','x_vel','y_vel','theta_vel']
  _slot_types = ['Header','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   header,x,y,theta,x_var,y_var,theta_var,x_vel,y_vel,theta_vel
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    super(Pose, self).__init__(*args, **kwds)
    #message fields cannot be None, assign default values for those that are
    if self.header is None:
      self.header = roslib.msg._Header.Header()
    if self.x is None:
      self.x = 0.
    if self.y is None:
      self.y = 0.
    if self.theta is None:
      self.theta = 0.
    if self.x_var is None:
      self.x_var = 0.
    if self.y_var is None:
      self.y_var = 0.
    if self.theta_var is None:
      self.theta_var = 0.
    if self.x_vel is None:
      self.x_vel = 0.
    if self.y_vel is None:
      self.y_vel = 0.
    if self.theta_vel is None:
      self.theta_vel = 0.

  ## internal API method
  ## @param self: self
  def _get_types(self): return Pose._slot_types

  ## serialize message into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      buff.write(struct.pack('<9f', self.x, self.y, self.theta, self.x_var, self.y_var, self.theta_var, self.x_vel, self.y_vel, self.theta_vel))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 36
      (self.x, self.y, self.theta, self.x_var, self.y_var, self.theta_var, self.x_vel, self.y_vel, self.theta_vel,) = struct.unpack('<9f',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      buff.write(struct.pack('<9f', self.x, self.y, self.theta, self.x_var, self.y_var, self.theta_var, self.x_vel, self.y_vel, self.theta_vel))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 36
      (self.x, self.y, self.theta, self.x_var, self.y_var, self.theta_var, self.x_vel, self.y_vel, self.theta_vel,) = struct.unpack('<9f',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

